plugins {
    id("ribs.kotlin-library-conventions")
    alias(libs.plugins.intellij)
}

group "com.uber.rib"

repositories {
    mavenLocal()
    google()
    mavenCentral()
}

intellij {
    plugins = ['java', 'Kotlin', 'android']
    version = libs.versions.intellij
    pluginName = "uber-ribs"
    updateSinceUntilBuild = false
    sandboxDir = "${project.gradle.gradleHomeDir}/caches/intellij"
    downloadSources = false
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencies {
    testImplementation(project(":libraries:rib-test"))
    testImplementation(project(":libraries:rib-compiler-test"))
    testImplementation(libs.dagger.compiler)
    testImplementation(libs.javax.inject)
    testImplementation(libs.dagger.library)
    testImplementation(testLibs.truth)
    testImplementation(testLibs.compileTesting)
    testImplementation(testLibs.mockito)
    testImplementation(libs.annotation)
    testImplementation(libs.android.api)
}

// Determines if the machine has Maven credentials.
def hasMavenCredentials() {
    return ext.mavenUser && ext.mavenPassword
}

// Determines if it is a release build.
def isReleaseBuild() {
    return System.env.ENABLE_RELEASE_BUILD.equals("true")
}

ext.pluginXml = new XmlSlurper().parse(file("src/main/resources/META-INF/plugin.xml"))
version = pluginXml.version


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

afterEvaluate {
    artifacts {
        archives sourcesJar
        archives project.tasks.getByName("buildPlugin")
    }
}
